#!/usr/bin/env python

# python libraries
import os, sys, optparse
import StringIO

# tanglegram libraries
try:
    import tanglegram
except ImportError:
    from os.path import realpath, dirname, join
    sys.path.append(join(realpath(dirname(dirname(__file__))), "python"))
    import tanglegram

# rasmus and compbio libraries
from rasmus import util, treelib
from rasmus import svg
##from compbio import phylo

# tanglegram layout libraries
from tanglegram import tanglegram as tanglegram_layout
from tanglegram import newick
from tanglegram import newick_utils

#=============================================================================
# parser

def parse_args():
    parser = optparse.OptionParser(usage="%prog [options] <newick file>")
##    parser = optparse.OptionParser(usage="%prog [options] <host/species tree> <parasite/gene tree> <leaf mapping>")

    parser.add_option("-g", "--graphical", dest="graphical",
                      metavar="<filename>|-",
                      default="-",
                      help="output file")
##    parser.add_option("--layout", dest="layout",
##                      metavar="[(lah)|lh|ah|-]",
##                      choices=["lah", "lh", "ah", "-"],
##                      default="lah",
##                      help="heuristic to minimize crossings")
    parser.add_option("-l", "--scale", dest="scale",
                      metavar="<scaling>", default=20,
                      type="float")
    parser.add_option("-n", "--names", dest="names",
                      action="store_true",
                      default=False,
                      help="display internal node names")
    parser.add_option("--len", dest="len",
                      action="store_true",
                      default=False,
                      help="display branch lengths")
    parser.add_option("--boot", dest="boot",
                      action="store_true",
                      help="display bootstraps")
    parser.add_option("--spacing", dest="spacing",
                      metavar="<spacing multiplier>",
                      type="float", default=1.2,
                      help="spacing multiplier")

    options, args = parser.parse_args()
    options.layout = "ah" # default to AH heuristic

    if len(args) != 1:
        parser.error("invalid number of arguments")
        
    return options, args

#=============================================================================

def get_branch_labels(tree):
    global options
    
    # init labels
    labels = {}
    for node in tree.nodes.values():
        labels[node.name] = ""

    # create branch labels
    for node in tree.nodes.values():

        # label distances
        if options.len:
            labels[node.name] += "%f" % node.dist

        # label bootstraps
        if options.boot and \
           ("boot" in node.data and node.data["boot"] != 0):
            if isinstance(node.data["boot"], int):
                labels[node.name] = "(%d) %s" % (node.data["boot"], 
                                                 labels[node.name])
            else:
                labels[node.name] = "(%.2f) %s" % (node.data["boot"], 
                                                   labels[node.name])

        # label node names
        if options.names and not node.is_leaf():
            labels[node.name] = "[%s] %s" % (node.name, 
                                             labels[node.name])

    return labels
    

def display_tanglegram(gtree, stree, leaf_mapping,
                       filename,
                       *args, **kargs):
    if filename == "-":
        if not os.fork():
            kargs.setdefault('filename', os.popen("display", "w"))
            draw_tanglegram(gtree, stree, leaf_mapping,
                            *args, **kargs)
            sys.exit(0)
    else:
        draw_tanglegram(gtree, stree, leaf_mapping,
                        filename=filename,
                        *args, **kargs)
            

def draw_tanglegram(gtree, stree, leaf_mapping,
                    xscale=100, yscale=20,
                    leafPadding=10,
                    labelOffset=-1, fontSize=10,
                    filename=sys.stdout,
                    rmargin=20, lmargin=20, tmargin=0, bmargin=None):

    # set defaults
    if bmargin is None:
        bmargin = yscale

    tree1, tree2 = stree, gtree
        
    # layout tree 1
    coords1 = treelib.layout_tree_hierarchical(tree1, xscale, yscale)
    xcoords1, ycoords1 = zip(*coords1.values())
    maxwidth1 = max(xcoords1)
    maxheight1 = max(ycoords1) + labelOffset

    # layout tree 2
    coords2 = treelib.layout_tree_hierarchical(tree2, xscale, yscale)
    xcoords2, ycoords2 = zip(*coords2.values())
    maxwidth2 = max(xcoords2)
    maxheight2 = max(ycoords2) + labelOffset

    # spacing between trees
    maxlength1 = max(map(text_length, tree1.leaf_names()))
    maxlength2 = max(map(text_length, tree2.leaf_names()))
    spacing = (maxlength1 + maxlength2) * options.spacing + 2 * leafPadding

    # SVG attributes
    width = int(lmargin + maxwidth1 + maxwidth2 + spacing + rmargin)
    height = int(tmargin + max(maxheight1, maxheight2) + bmargin)

    # flip layout for tree 2
    for node in tree2:
        x, y = coords2[node]
        coords2[node] = width - lmargin - rmargin - x, y

    # start SVG
    canvas = svg.Svg(util.open_stream(filename, "w"))
    canvas.beginSvg(width, height)
    canvas.beginStyle("font-family: courier")   # fixed width font
    canvas.beginTransform(("translate", lmargin, tmargin))

    # draw species tree
    draw_tree(tree1, layout=coords1, canvas=canvas,
              rmargin=rmargin, lmargin=lmargin, tmargin=tmargin, bmargin=bmargin,
              filename=filename,
              fontSize=fontSize,
              leafPadding=leafPadding, leafAnchor="start")

    # draw tree2
    draw_tree(tree2, layout=coords2, canvas=canvas,
              rmargin=rmargin, lmargin=lmargin, tmargin=tmargin, bmargin=bmargin,
              filename=filename,
              fontSize=fontSize,
              leafPadding=-leafPadding, leafAnchor="end")

    # draw tip associations
    for name2, name1 in leaf_mapping.iteritems():
        x1, y1 = coords1[tree1[name1]]
        x2, y2 = coords2[tree2[name2]]
        canvas.line(x1 + leafPadding + text_length(name1, fontSize), y1,
                    x2 - leafPadding - text_length(name2, fontSize), y2,
                    color=svg.grey)

    # end SVG
    canvas.endTransform()
    canvas.endStyle()
    canvas.endSvg()


def draw_tree(tree, layout, canvas,
              leafPadding, leafAnchor,
              labelOffset=None, fontSize=10, labelSize=None,
              filename=sys.stdout,
              rmargin=150, lmargin=10, tmargin=0, bmargin=None,
              drawHoriz=True):
    """
    Adapted from treesvg.py.
    """

    # defaults
    fontRatio = 8. / 11.
    if labelSize is None:
        labelSize = .7 * fontSize
    if labelOffset is None:
        labelOffset = -1
    for node in tree:
        node.color = svg.black
        
    # draw tree
    labels = get_branch_labels(tree)
    def walk(node):
        x, y = layout[node]
        if node.parent:
            parentx, parenty = layout[node.parent]
        else:
            parentx, parenty = x, y     # no branch

        # draw branch
        if drawHoriz:
            canvas.line(parentx, y, x, y, color=node.color)
        else:
            canvas.line(parentx, parenty, x, y, color=node.color)
        
        # draw branch labels
        if node.name in labels:
            branchlen = abs(x - parentx)
            lines = str(labels[node.name]).split("\n")
            labelwidth = max(map(len, lines))
            labellen = min(labelwidth * fontRatio * fontSize, 
                           max(int(branchlen-1), 0))
            
            for i, line in enumerate(lines):
                canvas.text(line,
                            min(parentx, x) + (branchlen - labellen)/2., 
                            y + labelOffset  +(-len(lines)+1+i)*(labelSize+1),
                            labelSize)

        # draw leaf labels or recur
        if node.is_leaf():
            canvas.text(str(node.name),
                        x + leafPadding, y + fontSize/2., fontSize,
                        fillColor=node.color,
                        anchor=leafAnchor)
        else:
            if drawHoriz:
                # draw vertical part of branch
                top = layout[node.children[0]][1]
                bot = layout[node.children[-1]][1]
                canvas.line(x, top, x, bot, color=node.color)
                
            for child in node.children:
                walk(child)
    walk(tree.root)
    

def text_length(msg, fontSize=10):
    # hack to return text length
    return len(msg) * fontSize * 0.7
    
#=============================================================================
# parse options

def main():
    global options
    options, args = parse_args()

##    # read files
##    streefile, gtreefile, mapfile = args
##    stree = treelib.read_tree(streefile)
##    gtree = treelib.read_tree(gtreefile)
##    gene2species = phylo.read_gene2species(mapfile)
##    leaf_mapping = {}  # key = gene name, value = species name
##    for gname in gtree.leaf_names():
##        leaf_mapping[gname] = gene2species(gname)

    # read newick file
    newickfile = args[0]
    contents = util.open_stream(newickfile).read()
    stree_string, gtree_string, leaf_mapping_string = contents.split(";")
    stree = treelib.parse_newick(stree_string)
    gtree = treelib.parse_newick(gtree_string)
    leaf_mapping = {}
    for pair in leaf_mapping_string.split():
        if pair.count(":") != 1:
            print >>sys.stderr, "invalid leaf mapping"
            return 0
        gname, sname = pair.split(":")
        leaf_mapping[gname] = sname

    # pre-process (to minimize crossings in layout)
    if options.layout != "-":
        # adapted from tanglegram-cl.py
        fS = StringIO.StringIO()
        stree.write(out=fS, oneline=True)
        S = newick.tree.parse_tree(fS.getvalue())
        fS.close()

        fG = StringIO.StringIO()
        gtree.write(out=fG, oneline=True)
        G = newick.tree.parse_tree(fG.getvalue())
        fG.close()

        I = [(leaf_mapping[name], name) for name in gtree.leaf_names()]
        newick_utils.newick_leaf_map(S, G, I)

        if options.layout == "lah":
            result = tanglegram_layout.tanglegram2TAH(S, G, optimize="MIN_MOD", solver="LIST")
        elif options.layout == "lh":
            result = tanglegram_layout.tanglegram2TH (S, G, optimize="MIN_MOD", solver="LIST")
        elif options.layout == "ah":
            result = tanglegram_layout.tanglegram2TA(S, G, optimize="MIN_MOD", solver="LIST")
        ncrossings, tS, tG, niter = result

##        print "Crossings: %d" % ncrossings
##        print "Iterations: %d" % niter
##        print "Arranged host: %s" % tS
##        print "Arranged parasite: %s" % tG
        
        stree = treelib.parse_newick(str(tS), namefunc=lambda s: s.strip("'"))
        gtree = treelib.parse_newick(str(tG), namefunc=lambda s: s.strip("'"))
    else:
        pass

    # process
    display_tanglegram(gtree, stree, leaf_mapping,
                       filename=options.graphical,
                       xscale=options.scale)

if __name__ == "__main__":
    sys.exit(main())
